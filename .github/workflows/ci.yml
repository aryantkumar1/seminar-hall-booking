name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_DB: seminar_hall_booking_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    name: Lint and Type Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Run ESLint (Frontend)
      run: npm run lint

    - name: Run TypeScript check (Frontend)
      run: npx tsc --noEmit --project .

    - name: Run ESLint (Backend)
      run: cd backend && npm run lint

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Run backend tests
      run: cd backend && npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build Tests
  build-test:
    runs-on: ubuntu-latest
    name: Build Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: cd backend && npm ci

    - name: Build frontend
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        MONGODB_DB: seminar-hall-booking-test
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRES_IN: 7d
        NEXTAUTH_SECRET: test-nextauth-secret
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
      run: npm run build

    - name: Build backend
      run: cd backend && npm run build

  # Docker Build Test
  docker-build-test:
    runs-on: ubuntu-latest
    name: Docker Build Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: seminar-hall-booking:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MONGODB_URI=mongodb://localhost:27017/test
          MONGODB_DB=seminar-hall-booking-test
          JWT_SECRET=test-secret-key-for-ci
          JWT_EXPIRES_IN=7d
          NEXTAUTH_SECRET=test-nextauth-secret

    - name: Test Docker image
      run: |
        docker run --rm seminar-hall-booking:test node --version

  # Integration Tests with Database
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run integration tests
      run: cd backend && npm run test
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        JWT_SECRET: test-secret-key

  # API Testing with Postman/Newman
  api-tests:
    runs-on: ubuntu-latest
    name: API Tests (Postman/Newman)

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Build backend
      run: cd backend && npm run build

    - name: Start backend server
      run: |
        cd backend && npm start &
        echo $! > backend.pid
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-api-tests
        JWT_EXPIRES_IN: 7d
        PORT: 5000

    - name: Wait for backend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'

    - name: Run Postman API Tests
      run: |
        # Install Newman
        npm install -g newman

        # Run Postman collection
        newman run postman/seminar-hall-api.postman_collection.json \
          --environment postman/environment.json \
          --reporters cli,json,junit \
          --reporter-json-export newman-results.json \
          --reporter-junit-export newman-results.xml

    - name: Upload Newman Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newman-results
        path: |
          newman-results.json
          newman-results.xml

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: API Tests (Newman)
        path: newman-results.xml
        reporter: java-junit

    - name: Stop backend server
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
