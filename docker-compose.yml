version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: seminar-hall-db
    environment:
      POSTGRES_DB: seminar_hall_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: seminar-hall-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME:-yourusername}/seminar-hall-booking:backend-latest
    container_name: seminar-hall-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/seminar_hall_booking
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # volumes:
      # - ./backend:/app  # Commented out - this overrides the built dist folder
      # - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js (Development mode on port 9002)
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    image: ${DOCKER_USERNAME:-yourusername}/seminar-hall-booking:frontend-latest
    container_name: seminar-hall-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5000
    ports:
      - "9002:9002"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - .:/app  # Enable hot reload for development
      - /app/node_modules
      - /app/.next
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Newman (Postman CLI) for API Testing
  newman:
    image: postman/newman:latest
    container_name: seminar-hall-newman
    volumes:
      - ./postman:/etc/newman
    command: >
      run /etc/newman/seminar-hall-api.postman_collection.json
      --environment /etc/newman/environment.json
      --reporters cli,json
      --reporter-json-export /etc/newman/results.json
    depends_on:
      backend:
        condition: service_healthy
    profiles:
      - testing

  # Terraform for Infrastructure Management
  terraform:
    image: hashicorp/terraform:latest
    container_name: seminar-hall-terraform
    working_dir: /workspace
    volumes:
      - ./terraform:/workspace
      - ~/.aws:/root/.aws:ro  # AWS credentials (read-only)
    environment:
      - TF_IN_AUTOMATION=true
    command: ["terraform", "version"]
    profiles:
      - infrastructure

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: seminar-hall-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: seminar-hall-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
