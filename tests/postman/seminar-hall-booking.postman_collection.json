{
  "info": {
    "name": "Seminar Hall Booking API",
    "description": "Comprehensive API tests for the Seminar Hall Booking System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}"
    },
    {
      "key": "adminToken",
      "value": ""
    },
    {
      "key": "facultyToken",
      "value": ""
    },
    {
      "key": "hallId",
      "value": ""
    },
    {
      "key": "bookingId",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains status', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('OK');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      }
    },
    {
      "name": "Admin Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Admin login successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains token and user', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData).to.have.property('user');",
              "    pm.expect(jsonData.user.role).to.eql('admin');",
              "    ",
              "    // Store token for subsequent requests",
              "    pm.collectionVariables.set('adminToken', jsonData.token);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"admin@university.edu\",\n  \"password\": \"admin123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        }
      }
    },
    {
      "name": "Faculty Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Faculty login successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains token and user', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData).to.have.property('user');",
              "    pm.expect(jsonData.user.role).to.eql('faculty');",
              "    ",
              "    // Store token for subsequent requests",
              "    pm.collectionVariables.set('facultyToken', jsonData.token);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"john.smith@university.edu\",\n  \"password\": \"faculty123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        }
      }
    },
    {
      "name": "Get All Halls",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get halls successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains halls array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "    ",
              "    if (jsonData.length > 0) {",
              "        pm.collectionVariables.set('hallId', jsonData[0].id);",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{facultyToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/halls",
          "host": ["{{baseUrl}}"],
          "path": ["api", "halls"]
        }
      }
    },
    {
      "name": "Create Booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Create booking successful', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response contains booking data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('pending');",
              "    ",
              "    pm.collectionVariables.set('bookingId', jsonData.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{facultyToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"hallId\": {{hallId}},\n  \"date\": \"2024-12-25\",\n  \"startTime\": \"09:00\",\n  \"endTime\": \"11:00\",\n  \"purpose\": \"API Test Booking\",\n  \"expectedAttendees\": 50\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/bookings",
          "host": ["{{baseUrl}}"],
          "path": ["api", "bookings"]
        }
      }
    },
    {
      "name": "Get Booking by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get booking successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains booking data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get('bookingId')));",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{facultyToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "bookings", "{{bookingId}}"]
        }
      }
    },
    {
      "name": "Admin Approve Booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Approve booking successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Booking status updated to approved', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.eql('approved');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{adminToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"status\": \"approved\",\n  \"adminNotes\": \"Approved for testing purposes\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/admin/bookings/{{bookingId}}/status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "admin", "bookings", "{{bookingId}}", "status"]
        }
      }
    },
    {
      "name": "Get All Bookings (Admin)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Get all bookings successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains bookings array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{adminToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/admin/bookings",
          "host": ["{{baseUrl}}"],
          "path": ["api", "admin", "bookings"]
        }
      }
    },
    {
      "name": "Delete Booking",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Delete booking successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response confirms deletion', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{facultyToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "bookings", "{{bookingId}}"]
        }
      }
    },
    {
      "name": "CI/CD Pipeline Demo",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Demo endpoint returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct structure', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData).to.have.property('timestamp');",
              "    pm.expect(jsonData).to.have.property('version');",
              "    pm.expect(jsonData).to.have.property('environment');",
              "    pm.expect(jsonData).to.have.property('pipeline_demo');",
              "});",
              "",
              "pm.test('Pipeline demo has correct features', function () {",
              "    const jsonData = pm.response.json();",
              "    const features = jsonData.pipeline_demo.features;",
              "    pm.expect(features).to.include('GitHub Actions CI/CD');",
              "    pm.expect(features).to.include('Docker Containerization');",
              "    pm.expect(features).to.include('Terraform Infrastructure');",
              "    pm.expect(features).to.include('Prometheus Monitoring');",
              "    pm.expect(features).to.include('Grafana Dashboards');",
              "});",
              "",
              "pm.test('CI/CD status is active', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.pipeline_demo.ci_cd_status).to.eql('active');",
              "    pm.expect(jsonData.pipeline_demo.monitoring_enabled).to.be.true;",
              "});",
              "",
              "console.log('🚀 CI/CD Pipeline Demo Test Completed Successfully!');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/demo",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "demo"
          ]
        }
      },
      "response": []
    }
  ]
}
